name: Test macOS M1 self-hosted - build of Rust examples

on:
  workflow_dispatch

jobs:
  get_release:
    # https://github.com/octokit/request-action
    name: Get release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_upload_url.outputs.url }}
    steps:
    - uses: octokit/request-action@v2.x
      id: get_latest_release
      with:
        route: GET /repos/{owner}/{repo}/releases/latest
        owner: esp-rs
        repo: rust-build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: get upload url
      id: get_upload_url
      run: |
        url=$(echo "$response" | jq -r '.upload_url')
        echo "::set-output name=url::$url"
      env:
        response:  ${{ steps.get_latest_release.outputs.data }}

  build-idf-rust-examples:
    name: Build IDF Rust Examples for ${{ matrix.os }}
    needs: get_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-m1-self-hosted ]
        include:
        - os: macos-m1-self-hosted
          ARCH: ''
          ASSET_PATH: 'build/dist/rust-1.56.0-dev-aarch64-apple-darwin.tar.xz'
          ASSET_NAME: 'rust-1.56.0-dev-aarch64-apple-darwin.tar.xz'
          ASSET_CONTENT_TYPE: 'application/x-tar'
          LLVM_ROOT_OPTION: ''
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          ref: build/1.56
      - name: Set up Python
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04' || matrix.os == 'windows-latest' }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Setup Ninja
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04' || matrix.os == 'windows-latest' }}
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Clean environment before running test
        if: ${{ matrix.os == 'macos-m1-self-hosted' }}
        run: rm -rf "${HOME}/.rustup/toolchains/esp"
      - name: Install Rust
        run: ./install-rust-toolchain.sh --export-file export-rust.sh
      - name: Checkout repository rust-esp32-std-hello
        uses: actions/checkout@v2
        with:
          repository: ivmarkov/rust-esp32-std-hello
          path: rust-esp32-std-hello
      - name: Install Cargo-first build dependencies
        run: cargo install cargo-pio ldproxy
      - name: Build rust-esp32-std-hello xtensa-esp32-espidf
        working-directory: rust-esp32-std-hello
        run: |
          cat ../export-rust.sh
          source ../export-rust.sh
          ls $LIBCLANG_PATH
          cargo +esp build --target xtensa-esp32-espidf
      - name: Build rust-esp32-std-hello xtensa-esp32s2-espidf
        working-directory: rust-esp32-std-hello
        run: |
          cat ../export-rust.sh
          source ../export-rust.sh
          ls $LIBCLANG_PATH
          cargo +esp build --target xtensa-esp32s2-espidf
      - name: Build rust-esp32-std-hello riscv32imc-esp-espidf
        working-directory: rust-esp32-std-hello
        run: |
          cat ../export-rust.sh
          source ../export-rust.sh
          ls $LIBCLANG_PATH
          cargo +esp build --target riscv32imc-esp-espidf
      - name: Prepare artifact for upload
        working-directory: rust-esp32-std-hello/target/xtensa-esp32-espidf/debug/
        run: zip ../../../../rust-esp32-std-hello-xtensa-esp32-espidf.zip rust-esp32-std-hello
      - name: Prepare artifact for upload
        working-directory: rust-esp32-std-hello/target/xtensa-esp32s2-espidf/debug/
        run: zip ../../../../rust-esp32-std-hello-xtensa-esp32s2-espidf.zip rust-esp32-std-hello
      - name: Prepare artifact for upload
        working-directory: rust-esp32-std-hello/target/riscv32imc-esp-espidf/debug/
        run: zip ../../../../rust-esp32-std-hello-riscv32imc-esp-espidf.zip rust-esp32-std-hello
      - name: Upload Release Asset
        id: upload-release-asset-esp32
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.get_release.outputs.upload_url }}
          asset_path: rust-esp32-std-hello-xtensa-esp32-espidf.zip
          asset_name: rust-esp32-std-hello-xtensa-esp32-espidf.zip
          asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE }}
      - name: Upload Release Asset
        id: upload-release-asset-esp32s2
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.get_release.outputs.upload_url }}
          asset_path: rust-esp32-std-hello-xtensa-esp32s2-espidf.zip
          asset_name: rust-esp32-std-hello-xtensa-esp32s2-espidf.zip
          asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE }}
      - name: Upload Release Asset
        id: upload-release-asset-esp32c3
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.get_release.outputs.upload_url }}
          asset_path: rust-esp32-std-hello-riscv32imc-esp-espidf.zip
          asset_name: rust-esp32-std-hello-riscv32imc-esp-espidf.zip
          asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE }}
